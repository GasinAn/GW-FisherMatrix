from math import pi

import numpy as np
from astropy.constants import G, M_sun, c
from scipy.integrate import quad


def prod_11(f):
    return 50896.5327951021/(f**(7/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_12(f):
    return 0

def prod_13(f):
    return 0

def prod_14(f):
    return 0

def prod_15(f):
    return 0

def prod_16(f):
    return 0

def prod_17(f):
    return 0

def prod_22(f):
    return 41.5481900368181*pi**2/(f**(1/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_23(f):
    return -1454.18665128863*pi/(f**(4/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_24(f):
    return -4547428931.86031*(2.05871662720838e-5*pi**(4/3)*f**(4/3) + 0.00562221559274278*pi**(2/3)*f**(2/3) - 0.000441323988908658*pi**2*f + 1)/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))

def prod_25(f):
    return -1212647715.16275*(0.000142042846569314*pi**(4/3)*f**(4/3) + 0.00594252024581147*pi**(2/3)*f**(2/3) - 0.00148946846256672*pi**2*f)/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))

def prod_26(f):
    return 752583.553307709*pi**(1/3)/(f**2*(f**2/2450 + 2 + 24010000/f**4))

def prod_27(f):
    return -77153.195608057*pi**(2/3)/(f**(5/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_33(f):
    return 50896.5327951021/(f**(7/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_34(f):
    return 159160012615.111*(2.05871662720838e-5*pi**(4/3)*f**(4/3) + 0.00562221559274278*pi**(2/3)*f**(2/3) - 0.000441323988908658*pi**2*f + 1)/(pi**(5/3)*f**4*(f**2/2450 + 2 + 24010000/f**4))

def prod_35(f):
    return 42442670030.6962*(0.000142042846569314*pi**(4/3)*f**(4/3) + 0.00594252024581147*pi**(2/3)*f**(2/3) - 0.00148946846256672*pi**2*f)/(pi**(5/3)*f**4*(f**2/2450 + 2 + 24010000/f**4))

def prod_36(f):
    return -26340424.3657698/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))

def prod_37(f):
    return 2700361.846282/(pi**(1/3)*f**(8/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_44(f):
    return 4.97713856415774e+17*(2.05871662720838e-5*pi**(4/3)*f**(4/3) + 0.00562221559274278*pi**(2/3)*f**(2/3) - 0.000441323988908658*pi**2*f + 1)**2/(pi**(10/3)*f**(17/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_45(f):
    return 1.32723695044206e+17*(0.000142042846569314*pi**(4/3)*f**(4/3) + 0.00594252024581147*pi**(2/3)*f**(2/3) - 0.00148946846256672*pi**2*f)*(2.05871662720838e-5*pi**(4/3)*f**(4/3) + 0.00562221559274278*pi**(2/3)*f**(2/3) - 0.000441323988908658*pi**2*f + 1)/(pi**(10/3)*f**(17/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_46(f):
    return -82369899168195.0*(2.05871662720838e-5*pi**(4/3)*f**(4/3) + 0.00562221559274278*pi**(2/3)*f**(2/3) - 0.000441323988908658*pi**2*f + 1)/(pi**(7/3)*f**(14/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_47(f):
    return 8444379251723.13*(2.05871662720838e-5*pi**(4/3)*f**(4/3) + 0.00562221559274278*pi**(2/3)*f**(2/3) - 0.000441323988908658*pi**2*f + 1)/(pi**2*f**(13/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_55(f):
    return 1249851846920.69*(0.02390279556379*pi**(4/3)*f**(4/3) + pi**(2/3)*f**(2/3) - 0.250645921419714*pi**2*f)**2/(pi**(10/3)*f**(17/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_56(f):
    return -21965306444852.0*(0.000142042846569314*pi**(4/3)*f**(4/3) + 0.00594252024581147*pi**(2/3)*f**(2/3) - 0.00148946846256672*pi**2*f)/(pi**(7/3)*f**(14/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_57(f):
    return 2251834467126.17*(0.000142042846569314*pi**(4/3)*f**(4/3) + 0.00594252024581147*pi**(2/3)*f**(2/3) - 0.00148946846256672*pi**2*f)/(pi**2*f**(13/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_66(f):
    return 13631929675.0919/(pi**(4/3)*f**(11/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_67(f):
    return -1397515175.71048/(pi*f**(10/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_77(f):
    return 143270154.18145/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))


Gamma = np.empty((7,7))
f_max = (6**(3/2)*pi*11.4*(M_sun*G/c**3).value)**(-1)
for i in range(1,8):
    for j in range(i,8):
        exec(f'quad_prod_ij = 2*quad(prod_{i}{j}, 10, f_max)[0]')
        Gamma[i-1,j-1] = quad_prod_ij
        Gamma[j-1,i-1] = quad_prod_ij

with open(__file__[:-3]+'_Gamma.txt', 'w') as f:
    for i in range(7):
        for j in range(7):
            f.write(str(Gamma[i,j])+' ')
        f.write('\n')
