from math import pi

import numpy as np
from astropy.constants import G, M_sun, c
from scipy.integrate import quad


def prod_11(f):
    return 50808.2057935719/(f**(7/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_12(f):
    return 0

def prod_13(f):
    return 0

def prod_14(f):
    return 0

def prod_15(f):
    return 0

def prod_16(f):
    return 0

def prod_17(f):
    return 0

def prod_22(f):
    return 41.4760863620995*pi**2/(f**(1/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_23(f):
    return -1451.66302267348*pi/(f**(4/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_24(f):
    return -28598279927.8659*(-3.05900257700633e-6*pi**(4/3)*f**(4/3) + 0.00222278156966712*pi**(2/3)*f**(2/3) - 8.82647977817315e-5*pi**2*f + 1)/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))

def prod_25(f):
    return -7626207980.76425*(-1.35256503375239e-5*pi**(4/3)*f**(4/3) + 0.00135728884862373*pi**(2/3)*f**(2/3) - 0.000297893692513344*pi**2*f)/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))

def prod_26(f):
    return 946583.023026913*pi**(1/3)/(f**2*(f**2/2450 + 2 + 24010000/f**4))

def prod_27(f):
    return -56750.2665003101*pi**(2/3)/(f**(5/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_33(f):
    return 50808.2057935719/(f**(7/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_34(f):
    return 1000939797475.31*(-3.05900257700633e-6*pi**(4/3)*f**(4/3) + 0.00222278156966712*pi**(2/3)*f**(2/3) - 8.82647977817315e-5*pi**2*f + 1)/(pi**(5/3)*f**4*(f**2/2450 + 2 + 24010000/f**4))

def prod_35(f):
    return 266917279326.749*(-1.35256503375239e-5*pi**(4/3)*f**(4/3) + 0.00135728884862373*pi**(2/3)*f**(2/3) - 0.000297893692513344*pi**2*f)/(pi**(5/3)*f**4*(f**2/2450 + 2 + 24010000/f**4))

def prod_36(f):
    return -33130405.805942/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))

def prod_37(f):
    return 1986259.32751085/(pi**(1/3)*f**(8/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_44(f):
    return 1.97188714405787e+19*(-3.05900257700633e-6*pi**(4/3)*f**(4/3) + 0.00222278156966712*pi**(2/3)*f**(2/3) - 8.82647977817315e-5*pi**2*f + 1)**2/(pi**(10/3)*f**(17/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_45(f):
    return 5.25836571748766e+18*(-1.35256503375239e-5*pi**(4/3)*f**(4/3) + 0.00135728884862373*pi**(2/3)*f**(2/3) - 0.000297893692513344*pi**2*f)*(-3.05900257700633e-6*pi**(4/3)*f**(4/3) + 0.00222278156966712*pi**(2/3)*f**(2/3) - 8.82647977817315e-5*pi**2*f + 1)/(pi**(10/3)*f**(17/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_46(f):
    return -652680825069990.0*(-3.05900257700633e-6*pi**(4/3)*f**(4/3) + 0.00222278156966712*pi**(2/3)*f**(2/3) - 8.82647977817315e-5*pi**2*f + 1)/(pi**(7/3)*f**(14/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_47(f):
    return 39130018034679.1*(-3.05900257700633e-6*pi**(4/3)*f**(4/3) + 0.00222278156966712*pi**(2/3)*f**(2/3) - 8.82647977817315e-5*pi**2*f + 1)/(pi**2*f**(13/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_55(f):
    return 2583235986299.02*(-0.00996519668693856*pi**(4/3)*f**(4/3) + pi**(2/3)*f**(2/3) - 0.219477005808603*pi**2*f)**2/(pi**(10/3)*f**(17/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_56(f):
    return -174048220018664.0*(-1.35256503375239e-5*pi**(4/3)*f**(4/3) + 0.00135728884862373*pi**(2/3)*f**(2/3) - 0.000297893692513344*pi**2*f)/(pi**(7/3)*f**(14/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_57(f):
    return 10434671475914.4*(-1.35256503375239e-5*pi**(4/3)*f**(4/3) + 0.00135728884862373*pi**(2/3)*f**(2/3) - 0.000297893692513344*pi**2*f)/(pi**2*f**(13/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_66(f):
    return 21603277890.3061/(pi**(4/3)*f**(11/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_67(f):
    return -1295176173.38492/(pi*f**(10/3)*(f**2/2450 + 2 + 24010000/f**4))

def prod_77(f):
    return 77649388.6076765/(pi**(2/3)*f**3*(f**2/2450 + 2 + 24010000/f**4))


Gamma = np.empty((7,7))
f_max = (6**(3/2)*pi*2.8*(M_sun*G/c**3).value)**(-1)
for i in range(1,8):
    for j in range(i,8):
        exec(f'quad_prod_ij = 2*quad(prod_{i}{j}, 10, f_max)[0]')
        Gamma[i-1,j-1] = quad_prod_ij
        Gamma[j-1,i-1] = quad_prod_ij

with open(__file__[:-3]+'_Gamma.txt', 'w') as f:
    for i in range(7):
        for j in range(7):
            f.write(str(Gamma[i,j])+' ')
        f.write('\n')
